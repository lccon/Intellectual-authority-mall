<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/tx
	     http://www.springframework.org/schema/tx/spring-tx.xsd
	     http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd">

  <aop:aspectj-autoproxy proxy-target-class="true"/>

  <context:component-scan base-package="com.mall">
    <context:exclude-filter type="annotation"
                            expression="org.springframework.stereotype.Controller" />
  </context:component-scan>

  <context:property-placeholder location="classpath:grid.properties"/>

  <!--数据源-->
  <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${db.driverClassName}"/>
    <property name="url" value="${db.fullURL}"/>
    <property name="username" value="${db.username}"/>
    <property name="password" value="${db.password}"/>
    <property name="testOnBorrow" value="true"/>
    <property name="testOnReturn" value="true"/>
    <property name="testWhileIdle" value="true"/>
    <property name="validationQuery" value="SELECT 1 FROM DUAL"/>
  </bean>

  <bean class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="configLocation" value="classpath:/mybatis-config.xml"/>
    <property name="mapperLocations" value="classpath:mappers/*.xml"/>
    <property name="typeAliasesPackage" value="com.mall.**.domain,com.mall.**.vo" />
  </bean>

  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.mall.mapper"/>
  </bean>

  <!-- 基于注解方式使用异常处理框架 -->
  <bean class="com.mall.exception.processor.ExceptionalAnnotationBeanPostProcessor" />
  <bean id="captureExceptionHandler" class="com.mall.exception.view.CaptureExceptionHandler"></bean>

  <!-- 注解式事务 @Transaction -->
  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource" />
  </bean>

  <!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
  <tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
      <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="move*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
      <tx:method name="get*" propagation="SUPPORTS" />
      <tx:method name="find*" propagation="SUPPORTS" />
      <tx:method name="load*" propagation="SUPPORTS" />
      <tx:method name="search*" propagation="SUPPORTS" />
      <tx:method name="*" propagation="SUPPORTS" />
    </tx:attributes>
  </tx:advice>

  <aop:config expose-proxy="true">
    <!-- 只对业务逻辑层实施事务 -->
    <aop:pointcut id="txPointcut" expression="execution(* com..service.*Service.*(..))" />
    <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
    <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
  </aop:config>

  <!-- quartz持久化到db 进行集群任务 -->
  <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">
    <property name="dataSource">
      <!--数据源引用-->
      <ref bean="dataSource" />
    </property>
    <property name="overwriteExistingJobs" value="true" />
    <property name="applicationContextSchedulerContextKey" value="applicationContext" />
    <property name="configLocation" value="classpath:quartz.properties" />
  </bean>

</beans>